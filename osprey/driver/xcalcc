#! /usr/bin/env python3

import os
import sys
import logging
import argparse
import platform
import subprocess
from shutil import which
from typing import List, Tuple

XCALCC        = "xcalcc"
W2LL          = "w2ll"
LLC           = "llc"
GCC           = "gcc"

MAPCLANG      = "mapclang"
CC1           = "cc142"
WGEN          = "wgen42"
INLINE        = "inline"
BE            = "be"
PP_OPTS       = "-D__GNUC_MINOR__=0 -D__GNUC__=10"
CC1_OPTS      = "-Wall -fcxx-openmp -fmastiff -finline-functions-called-once -finline-functions -msse2 -dx -quiet -fpreprocessed -fbuiltin -dumpbase"
INLINE_OPTS   = "-PHASE:v=off:x=off -PHASE:l:w:c -sw -O3 -TARG:abi=n64 -LANG:cxx_openmp=on" 
BE_OPTS       = "-PHASE:v=off:x=off -PHASE:l:w:c -G8 -sw -TARG:abi=n64 -LANG:cxx_openmp=on -LANG:=ansi_c -TARG:processor=wolfdale"
W2LL_OPTS     = "-disable_trace"
LLC_OPTS      = "--march=riscv64 -target-abi lp64d --asm-verbose --debugger-tune=gdb" 
MAPCLANG_OPTS = "-cc1 -emit-llvm -triple x86_64-unknown-linux-gnu -D__clang__ -internal-isystem /usr/local/mastiff/include/clang/c++ -D__GNUC__=4 -D__GNUC_MINOR__=2 -internal-isystem /usr/local/mastiff/include -internal-isystem /usr/local/mastiff/include/clang -internal-isystem /usr/local/include -internal-externc-isystem /usr/include/x86_64-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -O3 -D__OPTIMIZE__ -xc" 
USE_GCC       = "-gcc"

# would be fixed by the installer
VERSION       = "{XCALCC_VERSION}"
PHASEPATH     = "lib/gcc-lib/{TARG_HOST}-open64-linux/5.0"

MACHINE     = ""
XCALCC_HOME = ""
LD_LIBRARY_PATH = ""

DEFAULT_OPTS = ["-PHASE:c=off", "-WOPT:divrem=0", "-LNO:simd=0", "-WOPT:cfo_main=0"]

# options
OPT_LEVEL = 2
ASM_MODE  = False
NEED_LINK = True
STATIC    = False
PIC       = True
DEBUG     = False
LOG       = False 
EMIT_LLVM = False
AST_DUMP  = False
STD       = ""
VERIFY    = ""


class Formatter(logging.Formatter):

    grey = "\x1b[38;20m"
    yellow = "\x1b[33;20m"
    red = "\x1b[31;20m"
    bold_red = "\x1b[31;1m"
    reset = "\x1b[0m"
    format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s (%(filename)s:%(lineno)d)"

    FORMATS = {
        logging.DEBUG: grey + format + reset,
        logging.INFO: grey + format + reset,
        logging.WARNING: yellow + format + reset,
        logging.ERROR: red + format + reset,
        logging.CRITICAL: bold_red + format + reset
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)


def report_err(logger: logging.Logger, cond: bool, msg: str):
    if cond == False:
        logger.error(msg)
    return cond


def set_env():
    global GCC
    global W2LL
    global LLC
    global MAPCLANG
    global CC1
    global WGEN
    global INLINE
    global BE
    global MACHINE
    global XCALCC_HOME
    global LD_LIBRARY_PATH

    check_exec()

    MACHINE = platform.machine()
    if MACHINE == "x86_64":
        GCC = "riscv64-linux-gnu-gcc" 

    bin_path = os.path.abspath(which("xcalcc").rstrip("xcalcc"))
    LD_LIBRARY_PATH = os.path.join(bin_path, os.pardir, PHASEPATH)
    os.environ["LD_LIBRARY_PATH"] = LD_LIBRARY_PATH

    W2LL   = os.path.join(LD_LIBRARY_PATH, W2LL)
    LLC    = os.path.join(LD_LIBRARY_PATH, LLC)
    MAPCLANG = os.path.join(LD_LIBRARY_PATH, MAPCLANG)
    CC1 = os.path.join(LD_LIBRARY_PATH, CC1)
    WGEN = os.path.join(LD_LIBRARY_PATH, WGEN)
    INLINE = os.path.join(LD_LIBRARY_PATH, INLINE)
    BE = os.path.join(LD_LIBRARY_PATH, BE)

def has_cmd(cmd: str):
    return which(cmd) is not None


def check_exec():
    try:
        if not has_cmd(XCALCC):
            raise AssertionError("xcalcc is missing")
    except AssertionError as e:
        print(e)
        sys.exit(1)


def collect_options(logger: logging.Logger, argv: List[str]) -> Tuple[List[str], List[str], str]:
    global OPT_LEVEL
    global ASM_MODE
    global NEED_LINK
    global STATIC
    global DEBUG
    global LOG
    global STD
    global EMIT_LLVM
    global AST_DUMP
    global VERIFY
    opts = []
    output = ""
    files = []

    # handle special cases in advance
    need_remove = []
    special_opt = ['-I', '-L', '-D', '-W', '-l']
    for arg in argv:
        special_opt_match = False
        for opt in special_opt:
            if arg.startswith(opt):
                special_opt_match = True
                break
        if special_opt_match:
            opts.append(arg)
        elif arg.startswith('-std='):
            STD = arg
        elif arg.startswith("-verify"):
            VERIFY = arg
        else:
            continue
        need_remove.append(arg)

    for arg in need_remove:
        argv.remove(arg)

    parser = argparse.ArgumentParser(description='xcalcc Compiler Suite: ' + VERSION)
    parser.add_argument(
        '-o',
        nargs=1,
        dest='output',
        help='Put output in following file name rather than a.out'
    )
    parser.add_argument(
        '-O',
        dest='opt_level',
        action='store_const',
        const=3,
        help='Full optimization'
    )
    parser.add_argument(
        '-O0',
        dest='opt_level',
        action='store_const',
        const=0,
        help='No optimization'
    )
    parser.add_argument(
        '-O1',
        dest='opt_level',
        action='store_const',
        const=1,
        help='Minimal optimization'
    )
    parser.add_argument(
        '-O2',
        dest='opt_level',
        action='store_const',
        const=2,
        help='Global optimization'
    )
    parser.add_argument(
        '-O3',
        dest='opt_level',
        action='store_const',
        const=3,
        help='Full optimization'
    )
    parser.add_argument(
        '-S',
        dest='asm_mode',
        action='store_true',
        help='Produce a .s and stop'
    )
    parser.add_argument(
        '-c',
        dest='need_link',
        action='store_false',
        help='Produce a .o and stop'
    )
    parser.add_argument(
        '-static',
        dest='static',
        action="store_true",
        help='Link object files staticly'
    )
    parser.add_argument(
        '-g',
        dest='debug',
        action='store_true',
        help='Full debug info'
    )
    parser.add_argument(
        '-v',
        dest='log',
        action='store_true',
        help='Show phases and version as they are being invoked'
    )
    parser.add_argument(
        '-fPIC',
        dest='pic',
        action='store_true',
        help='Generate position-independent code'
    )
    parser.add_argument(
        '-emit-llvm',
        dest='emit_llvm',
        action='store_true',
        help='Emit LLVM IR'
    )
    parser.add_argument(
        '-ast-dump',
        dest='ast_dump',
        action='store_true',
        help='Dump Clang AST'
    )

# Special case: argsparse cannot handle such options
    parser.add_argument(
        '-verify',
        dest='verify',
        action='store_true',
        help='Verify LLVM IR'
    )
    parser.add_argument(
        '-std=<value>',
        action='store_true',
        help='Language standard to compile for'
    )
    parser.add_argument(
        '-D<value>',
        action='store_true',
        help='Add following macro define'
    )
# end of special case

    parser.add_argument(
        'files',
        nargs='*'
    )

    args = parser.parse_intermixed_args(argv)

    ASM_MODE = args.asm_mode
    NEED_LINK = args.need_link
    STATIC = args.static
    DEBUG = args.debug
    LOG = args.log
    PIC = args.pic
    EMIT_LLVM = args.emit_llvm
    AST_DUMP = args.ast_dump
    files = args.files[1:]

    if len(files) == 0:
        if LOG == False:
            logger.error('''xcalcc: no input files\nFor general help: xcalcc -h|--help''')
            exit(-1)
        else:
            logger.warning('xcalcc Compiler Suite: ' + VERSION)
            exit(0)

    if args.output != None:
        output = args.output[0]

    if ASM_MODE == True:
        NEED_LINK = False
    
    if PIC == True:
        STATIC = False

    return opts, files, output


def gen_opts(opts: List[str]) -> str:
    res = " "
    for i in opts:
        res = res + i + " "
    return res


def rm_suffix(f: str) -> str:
    if '.' in f:
        while f[-1] != '.':
            f = f[: len(f) - 1]
        f = f[:-1]
    return f


def is_obj(f: str) -> bool:
    return f.endswith(".o")


def is_src(f: str) -> bool:
    src = [".c", ".cxx", ".cpp", ".c++", 
           ".cc", ".C", ".h", ".hpp", 
           ".hh", ".hxx", ".H", ".h++",
           ".ii", ".i", ".ixx", ".ipp",
           ".inl", ".txx", ".tpp", ".tpl"]
    for i in src:
        if f.endswith(i):
             return True
    return False

def preprocess(logger: logging.Logger, opts: List[str], f: str) -> bool:
    dot_i = rm_suffix(f.split('/')[-1]) + ".i" 
    cmd = opts + PP_OPTS.split() + ["-E", f, "-o", dot_i]

    if LOG:
        info = "preprocessing: " + GCC + " " + " ".join(i for i in cmd)
        logger.info(info)

    process = subprocess.Popen([GCC] + cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = process.communicate()

    if process.returncode != 0:
        logger.error(err.decode().strip())
        return False
    else:
        return True 
    

def cc1(logger: logging.Logger, f: str) -> bool:
    dot_i = rm_suffix(f.split('/')[-1]) + ".i" 
    spin = rm_suffix(f.split('/')[-1]) + ".spin" 

    opts = CC1_OPTS.split()
    if STD != "":
        opts = [STD] + opts

    if DEBUG == True:
        opts = ["-g2"] + opts
    cmd = opts + [f, dot_i, "-spinfile", spin]

    if LOG:
        info = CC1 + " " + " ".join(i for i in cmd)
        logger.info(info)

    process = subprocess.Popen([CC1] + cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = process.communicate()

    if process.returncode != 0:
        logger.error(err.decode().strip())
        return False
    else:
        return True 


def wgen(logger: logging.Logger, f: str) -> bool:
    spin = rm_suffix(f.split('/')[-1]) + ".spin" 
    dot_B = rm_suffix(f.split('/')[-1]) + ".B" 
    cmd = ["-fS," + spin, "-fB," + dot_B]

    if LOG:
        info = WGEN + " " + " ".join(i for i in cmd)
        logger.info(info)

    process = subprocess.Popen([WGEN] + cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = process.communicate()

    # the return code 16 means inlining is required
    if (process.returncode != 0) and (process.returncode != 16):
        logger.error(err.decode().strip())
        return False
    else:
        return True 


def mapclang(logger: logging.Logger, opts: List[str], f: str) -> bool:
    dot_B  = rm_suffix(f.split('/')[-1]) + ".B"
    dot_i = rm_suffix(f.split('/')[-1]) + ".i"
    opts = list(filter(lambda x: not x.startswith("-l"), opts))
    cmd = MAPCLANG_OPTS.split() + opts + [dot_i, "-o", dot_B]

    if AST_DUMP == True:
        cmd.append("-ast-dump")
    
    if VERIFY != "":
        cmd.append(VERIFY)

    if STD != "":
        cmd.append(STD)

    if LOG:
        info = MAPCLANG + " " + " ".join(i for i in cmd)
        logger.info(info)

    process = subprocess.Popen([MAPCLANG] + cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = process.communicate()

    if AST_DUMP == True:
        print(out.decode().strip())

    # the return code 16 means inlining is required
    if (process.returncode != 0) and (process.returncode != 16):
        logger.error(err.decode().strip())
        return False
    else:
        return True


def inline(logger: logging.Logger, f: str) -> bool:
    dot_B = rm_suffix(f.split('/')[-1]) + ".B" 
    dot_I = rm_suffix(f.split('/')[-1]) + ".I" 
    cmd = INLINE_OPTS.split()
    if DEBUG == True:
        cmd.append("-g2")
    cmd = cmd + DEFAULT_OPTS + ["-fB," + dot_B, "-fI," + dot_I, f] 

    if LOG:
        info = INLINE + " " + " ".join(i for i in cmd)
        logger.info(info)

    process = subprocess.Popen([INLINE] + cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = process.communicate()

    if process.returncode != 0:
        logger.error(err.decode().strip())
        return False
    else:
        return True 


def be(logger: logging.Logger, f: str) -> bool:
   #  -fB,a.I -s -fs,a.s /media/psf/Home/code/xc5/mastiff_build/a.c
    dot_I = rm_suffix(f.split('/')[-1]) + ".I" 
    dot_s = rm_suffix(f.split('/')[-1]) + ".s" 
    cmd = BE_OPTS.split()
    if DEBUG == True:
        cmd.append("-g2")
    cmd = cmd + DEFAULT_OPTS + ["-fB," + dot_I, "-s", "-fs," + dot_s, f]

    if LOG:
        info = BE + " " + " ".join(i for i in cmd)
        logger.info(info)

    process = subprocess.Popen([BE] + cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = process.communicate()

    if process.returncode != 0:
        logger.error(err.decode().strip())
        return False
    else:
        return True 


def front_end(logger: logging.Logger, opts: List[str], files: List[str]) -> List[str]:
    res = []

    # option for using GCC front end
    use_gcc = False
    if USE_GCC in opts:
        use_gcc = True
        opts.remove(USE_GCC)

    for f in files:
        name = rm_suffix(f.split('/')[-1]) 
        cmd = opts + [f]
        msg = "xcalcc: faild to compile " + f

        # run gcc to perform preprocessing
        ret = preprocess(logger, opts, f)
        if report_err(logger, ret, msg) == False:
            continue

        if use_gcc:
            #  run the front end of open64
            ret = cc1(logger, f)
            if report_err(logger, ret, msg) == False:
                continue

            # generate the *.B file
            ret = wgen(logger, f)
            if report_err(logger, ret, msg) == False:
                continue
        else:
            ret = mapclang(logger, opts, f)
            if report_err(logger, ret, msg) == False:
                continue
            # exit if ast dump is enabled
            if AST_DUMP == True:
                sys.exit(0)

        ret = inline(logger, f)
        if report_err(logger, ret, msg) == False:
            continue
        
        ret = be(logger, f)
        if report_err(logger, ret, msg) == False:
            continue
        
        res.append(name)

    return res


def whirl2llvm(logger: logging.Logger, opts: List[str], files: List[str], out_file: str) -> List[str]:
    res = []
    opts = []
    suffix = ""

    if OPT_LEVEL >= 2:
        suffix = ".O"
        opts = opts + W2LL_OPTS.split() + ["-all"]
    elif OPT_LEVEL == 1:
        suffix = ".I"
        opts = opts + W2LL_OPTS.split() + ["-all"]
    else:
        suffix = ".B"
        opts = opts + W2LL_OPTS.split()

    if EMIT_LLVM and out_file != "":
        opts.append("-o")
        opts.append(out_file)

    for f in files:
        cmd = [f + suffix] + opts

        if LOG:
            info = W2LL + " " + " ".join(i for i in cmd)
            logger.info(info)

        process = subprocess.Popen([W2LL] + cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = process.communicate()

        if EMIT_LLVM and out_file == '-':
            print(out.decode().strip())

        if process.returncode != 0:
            logger.error(err.decode().strip())
            sys.exit(process.returncode)
        else:
            res.append(f + suffix + ".ll")

    return res


def llc(logger: logging.Logger, opts: List[str], files: List[str], outfile: str) -> List[str]:
    res = []
    opts = ["-O" + str(OPT_LEVEL)] + LLC_OPTS.split()
    suffix = ""
    no_outfile = True if outfile == "" else False

    if ASM_MODE:
        suffix = ".s"
        opts.append("--filetype=asm")
    else:
        suffix = ".o"
        opts.append("--filetype=obj")

    if STATIC == True:
        opts.append("--relocation-model=static")
    elif PIC == True:
        opts.append("--relocation-model=pic")

    if (NEED_LINK == False) and (no_outfile == False): 
        if len(files) > 1:
            logger.error("cannot specify '-o' with multiple files: " + str(files))

    for f in files:
        if (NEED_LINK == True) or (no_outfile == True):
            outfile = f.rstrip(".ll").rstrip(".B").rstrip(".I").rstrip(".O") + suffix

        cmd = opts + [f, "-o", outfile] 

        if LOG:
            info = LLC + " " + " ".join(i for i in cmd)
            logger.info(info)

        process = subprocess.Popen([LLC] + cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = process.communicate()

        if ASM_MODE and outfile == "-":
            print(out.decode().strip())

        if process.returncode != 0:
            logger.error(err.decode().strip())
            sys.exit(process.returncode)
        else:
            res.append(outfile)

    return res


def link(logger: logging.Logger, opts: List[str], files: List[str], outfile: str):
    cmd = []
    if STATIC == True:
        cmd.append("-static")
    if DEBUG == True:
        cmd.append("-g")

    if outfile == "":
        outfile = "a.out"
    
    cmd = cmd + ["-o", outfile] + files

    for i in opts:
        if i.startswith("-l") or i.startswith("-L"):
            cmd.append(i)

    if LOG:
        info = GCC + " " + " ".join(i for i in cmd)
        logger.info(info)

    process = subprocess.Popen([GCC] + cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = process.communicate()

    if process.returncode != 0:
        logger.error(err.decode().strip())
        sys.exit(process.returncode)


def compile(logger: logging.Logger, opts: List[str], files: List[str], output: str):
    # create console handler with a higher log level
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)

    ch.setFormatter(Formatter())
    logger.addHandler(ch)
    
    src = list(filter(is_src, files))
    obj = list(filter(is_obj, files))
    unk = list(filter(lambda x : not (is_src(x) or is_obj(x)), files))

    if len(unk) != 0:
        logger.error("file format not recognized:" + str(unk))
        sys.exit(1)

    res = front_end(logger, opts, src)
    res = whirl2llvm(logger, opts, res, output)

    if EMIT_LLVM == False:
        res = llc(logger, opts, res, output)
        if NEED_LINK:
            link(logger, opts, res + obj, output)


def main():
    set_env()
    logger = logging.getLogger("xcalcc")
    logger.setLevel(logging.DEBUG)

    opts, files, output = collect_options(logger, sys.argv)

    compile(logger, opts, files, output)


if __name__ == "__main__":
    main()
