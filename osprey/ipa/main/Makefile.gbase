# -*- Makefile -*-
#  
#  Copyright (C) 2021 Xcalibyte (Shenzhen) Limited.
#  

#
#  Copyright (C) 2007. PathScale, LLC. All Rights Reserved.
#
#  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

#
#  Makefile.base for ipa
#

#----------------------------------------------------------------------
#  Include the usual commondefs
#----------------------------------------------------------------------
include $(COMMONDEFS)


ifeq ($(BUILD_TARGET), IA64)
# need _ version of targ_ia64
LCDEFS += -D__MIPS_AND_IA64_ELF_H -DTARG_IA64
LC++DEFS +=  $(LCDEFS)
endif

#----------------------------------------------------------------------
#  List of directories, and source files of interest
#----------------------------------------------------------------------
IPA_DIR                 = $(BUILD_TOT)/ipa
IPA_COMMON_DIR          = $(IPA_DIR)/common
IPA_LOCAL_DIR           = $(IPA_DIR)/local
IPA_MAIN_DIR            = $(IPA_DIR)/main
IPA_OPTIMIZE_DIR        = $(IPA_MAIN_DIR)/optimize
IPA_ANALYZE_DIR         = $(IPA_MAIN_DIR)/analyze
BE_DIR                  = $(BUILD_TOT)/be
BE_MIPS_DIR             = $(BE_DIR)/MIPS
BE_BE_DIR		= $(BE_DIR)/be
BE_REGION_DIR           = $(BE_DIR)/region
BE_CG_DIR               = $(BE_DIR)/cg
BE_COM_DIR              = $(BE_DIR)/com

ifdef LOCAL_OPT_DIR
BE_OPT_DIR              = $(BE_DIR)/$(LOCAL_OPT_DIR)
else
BE_OPT_DIR              = $(BE_DIR)/opt
endif

BE_LNOPT_DIR            = $(BE_DIR)/lno
COMMON_DIR              = $(BUILD_TOT)/common
COMMON_COM_DIR          = $(COMMON_DIR)/com
COMMON_LIB_DIR          = $(COMMON_DIR)/lib
COMMON_UTIL_DIR         = $(COMMON_DIR)/util

COMMON_COM_TARG_DIR     = $(COMMON_COM_DIR)/$(BUILD_TARGET_DIR)
COMMON_UTIL_TARG_DIR    = $(COMMON_UTIL_DIR)/$(BUILD_TARGET_DIR)

LD_DIR		        = $(BUILD_TOT)/fake_ld

INCLUDE_DIR             = $(ROOT)/usr/include

LD_COMMON_DIR		= $(LD_DIR)/common
LIBCOMUTIL_DIR          = $(BUILD_TOT)/libcomutil

TARGDIR			= $(BUILD_AREA)

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARG_BE_DIR: is the be directory with which we do build... this can
#               be retargeted (e.g., for building be with different options)
#               by setting LOCAL_BE_DIR in localdefs
#----------------------------------------------------------------------
ifdef LOCAL_BE_DIR
TARG_BE_DIR = $(TARGDIR)/$(LOCAL_BE_DIR)
else
TARG_BE_DIR = $(TARGDIR)/be
TARG_IPL_DIR = $(TARGDIR)/ipl
endif

# These are the directories in which to look for source files.

SRC_DIRS = \
  $(IPA_COMMON_DIR)   \
  $(IPA_LOCAL_DIR)    \
  $(IPA_OPTIMIZE_DIR) \
  $(IPA_ANALYZE_DIR)  \
  $(BE_LNOPT_DIR)     \
  $(BE_COM_DIR)	      \
  $(COMMON_COM_DIR)   \

HEADER_DIRS = \
  $(SRC_DIRS)		\
  $(BE_REGION_DIR)      \
  $(BE_OPT_DIR)		\
  $(COMMON_COM_TARG_DIR)\
  $(COMMON_UTIL_DIR)    \
  $(LD_COMMON_DIR)	\
  $(LD_DIR)		\
  $(TARGDIR)/be		\
  $(BUILD_TOT)/include

ifeq ($(BUILD_OS_LINUX_OR_DARWIN), TRUE)
HEADER_DIRS += $(TARGDIR)/include/libelf
else
ifeq ($(BUILD_OS), LINUX)
HEADER_DIRS += $(TARGDIR)/include/libelf
endif
endif

HEADER_DIRS += $(BUILD_TOT)/include/gnu


#----------------------------------------------------------------------
#  List of source files.  Please keep them in alphabetical order.
#----------------------------------------------------------------------

IPA_LD_COMMON_SRCS = \
	ipc_partition.c	\

IPA_COMMON_CXX_SRCS = \
	ip_graph.cxx		\
        ipc_dst_merge.cxx       \
        ipc_dst_utils.cxx       \
	ipc_link.cxx		\
	ipc_main.cxx 		\
	ipc_bread.cxx 		\
	ipc_bwrite.cxx 		\
	ipc_compile.cxx		\
	ipc_option.cxx 		\
	ipc_pic.cxx		\
	ipc_file.cxx		\
	ipc_symtab.cxx		\
	ipc_symtab_merge.cxx 	\
	ipc_type_merge.cxx	\
	ipc_ty_hash.cxx		\
#	ipc_preopt_ipl.cxx	\
#	ipc_daVinci.cxx		\

IPA_LOCAL_SRCS =  \
#	ip_annot.c \

IPA_LOCAL_CXX_SRCS = \
	ipl_summary_print.cxx \
	ipl_tlog.cxx \

# KEY:  Skip inline_script_parser.cxx.  Added ipa_builtins.cxx.
IPA_ANALYZE_CXX_SRCS = \
	ipa_option.cxx		\
	ip_graph_trav.cxx	\
	ipa_cg.cxx		\
	ipa_chg.cxx		\
	ipa_devirtual.cxx	\
	ipa_main.cxx		\
	ipa_cprop.cxx		\
	ipa_cprop_annot.cxx	\
	ipa_df.cxx		\
	ipa_pad.cxx             \
	ipa_feedback.cxx \
	ipa_solver.cxx \
	sparse_bv.cxx \
	ipa_lno_write.cxx \
	ipa_reshape.cxx \
	cg_browser.cxx \
	cg_summary.cxx \
	cgb.cxx \
	cgb_carray.cxx \
	cgb_ipa.cxx \
        wb_ipa.cxx \
	ipa_section_prop.cxx \
	ipa_section_annot.cxx \
	ipa_inline.cxx \
	cg_print.cxx \
	ipaa.cxx \
	ipa_preopt.cxx \
	ipa_summary.cxx \
	ipa_nested_pu.cxx \
        ipa_cost.cxx \
	ipa_reorder.cxx \
	ipa_builtins.cxx \
	ipa_struct_opt.cxx \
	ipa_nystrom_alias_analyzer.cxx \
	ipa_be_write.cxx \
	ipa_pcg.cxx \
	ipa_aot.cxx

IPA_OPTIMIZE_SRCS = \
#	ipo_parent.c \
#	ipo_conv.c \

IPA_OPTIMIZE_CXX_SRCS =	\
	ipo_main.cxx		\
	ipo_const.cxx		\
	ipo_inline.cxx	 	\
	ipo_inline_util.cxx	\
	ipo_clone.cxx		\
	ipo_dce.cxx		\
	ipo_alias.cxx		\
	ipo_autopar.cxx		\
	ipo_parent.cxx		\
        ipo_split.cxx           \
	ipo_pad.cxx		\
	ipo_alias_class.cxx	\
	ipo_icall.cxx		\
	ipo_struct_opt.cxx	\

BE_COM_CXX_SRCS = \
	ipa_section_main.cxx	\
	ipa_section_print.cxx	\
	clone.cxx		\
	clone_DST_utils.cxx	\
	reshape.cxx		\
	wb_summary.cxx		\
	ipa_cost_util.cxx	\
	be_util.cxx		\
	aot_mgr.cxx		\
#	cxx_template.cxx	\
#	wb_buffer.cxx		\
#	wb_util.cxx		\

BE_LNO_CXX_SRCS = \
	lwn_util.cxx \

COMMON_COM_CXX_SRCS = \
	dwarf_DST.cxx  \
	dwarf_DST_mem.cxx  \
	dwarf_DST_producer.cxx  \

IPA_SRCS = \
   $(IPA_ANALYZE_SRCS) \
   $(IPA_OPTIMIZE_SRCS) \

IPA_CXX_SRCS = \
   $(COMMON_COM_CXX_SRCS)	\
   $(IPA_COMMON_CXX_SRCS)	\
   $(IPA_LOCAL_CXX_SRCS)	\
   $(IPA_ANALYZE_CXX_SRCS)	\
   $(IPA_OPTIMIZE_CXX_SRCS)	\
   $(BE_COM_CXX_SRCS)		\
   $(BE_LNO_CXX_SRCS)		\

IPA_LD_CXX_OBJS = $(IPA_LD_COMMON_CXX_SRCS:.cxx=32.o) $(IPA_LD_COMMON_CXX_SRCS:.cxx=64.o)
IPA_LD_OBJS = $(IPA_LD_COMMON_SRCS:.c=32.o) $(IPA_LD_COMMON_SRCS:.c=64.o)
IPA_CXX_OBJS = $(IPA_CXX_SRCS:.cxx=.o) 
IPA_OBJS = $(IPA_SRCS:.c=.o)
IPA_ALL_OBJS = $(IPA_LD_CXX_OBJS) $(IPA_LD_OBJS) $(IPA_OBJS) $(IPA_CXX_OBJS)

# extra files to be removed with make clobber
LDIRT = $(BE_SO) $(IPL_SO) ii_files

VPATH    =  $(SRC_DIRS)

LCOPTS = $(STD_COMPILE_OPTS) $(STD_C_OPTS)
LC++OPTS = $(STD_COMPILE_OPTS) $(STD_C++_OPTS)

HOSTDEFS += -D_NEW_SYMTAB -D_MERGE_SUMMARY_ST_IDX_=1 -DBACK_END -fpic

LCINCS = $(addprefix -I, $(HEADER_DIRS))
LCDEFS += $(HOSTDEFS)
LCDEFS += -DSTD_MONGOOSE_LOC='"$(STD_MONGOOSE_LOC)"' -D_SUPPORT_IPA -D_MULTIGOT
LC++DEFS += $(HOSTDEFS) -DSTD_MONGOOSE_LOC='"$(STD_MONGOOSE_LOC)"'
LC++DEFS += -D_SUPPORT_IPA -DMONGOOSE_BE
#-DIPA_CPROP_TEST
LC++INCS = $(LCINCS)

ifeq ($(BUILD_OPTIMIZE), DEBUG)
LCDEFS += 
#-DIPA_CPROP_TEST
LC++DEFS +=
# -DIPA_CPROP_DEBUG
HOSTDEFS += -DIs_True_On
HOSTDEFS += -DInsist_On
endif

# add define HOST_IA64 to choose suitable headfile
ifeq (${BUILD_ARCH}, IA64)
HOSTDEFS +=-DHOST_IA64
endif

GLDOPTS = $(STD_LOAD_OPTS)


#DSOSTARTOPT = -update_registry $(TARG_BE_DIR)/so_locations -show -Wl,-no_unresolved
DSOSTARTOPT = -check_registry $(TARG_BE_DIR)/so_locations -show -Wl,-no_unresolved
#DSOSTARTOPT = -show -Wl,-no_unresolved
DSOSTARTOPT_32 = $(DSOSTARTOPT)
DSOSTARTOPT_N32 = $(DSOSTARTOPT)

TARGETS = $(IPA_SO)
TARGETS_PURE = $(IPA_SO).pure

#----------------------------------------------------------------------
#  For parallel makes, makefile must satisfy:
#  -> Submake for include/ finished before building any objects;
#  -> All archive/library submakes finished before linking targets;
#  -> All targets finished before make_deps or make_libdeps.
#----------------------------------------------------------------------

.PHONY: default first make_deps install

default:
	$(MAKE) first
	$(MAKE) make_deps

make_deps: $(TARGETS)
.PHONY: default install make_deps

pure: $(TARGETS_PURE)

#----------------------------------------------------------------------
#  Library prerequisites are updated via submake
#----------------------------------------------------------------------

.PHONY: first
first:
ifndef SKIP_DEP_BUILD
 ifeq ($(BUILD_OS), LINUX)
	$(call submake,$(BUILD_AREA)/include)
 endif
	$(call submake,$(TARG_IPL_DIR))
endif
	ln -sf $(TARG_BE_DIR)/$(BE_SO) .
	ln -sf $(TARG_IPL_DIR)/$(IPL_SO) .


#----------------------------------------------------------------------
#  Build and install 'ipa.so'
#----------------------------------------------------------------------

install: default
	$(STD_INSTALL) -F $(STD_MONGOOSE_LOC) $(TARGETS)
	\cp -f $(IPA_MAIN_DIR)/pfa_reshuffle ./pfa_reshuffle
	$(STD_INSTALL) -F $(STD_MONGOOSE_LOC) pfa_reshuffle
install.pure: $(TARGETS_PURE)
	$(STD_INSTALL) -F $(STD_MONGOOSE_LOC) $(TARGETS_PURE)

$(IPA_SO): $(IPA_ALL_OBJS) $(BE_BE_DIR)/so_locations \
		$(TARG_BE_DIR)/$(BE_SO) $(BE_SO) $(TARG_IPL_DIR)/$(IPL_SO) $(IPL_SO)
	$(link.c++f) $(STD_DSO_LOADOPTS) \
		$(IPA_ALL_OBJS) -o $@ $(NONE_OPT) \
		$(BE_SO) $(IPL_SO)  $(LLDLIBS)

$(IPA_SO).pure: $(IPA_SO)
	LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):$(TARG_BE_DIR) purify $(IPA_SO)

ipc_partition32.o: $(IPA_COMMON_DIR)/ipc_partition.c
	$(CCF) -c -o ipc_partition32.o $(IPA_COMMON_DIR)/ipc_partition.c

ipc_partition64.o: $(IPA_COMMON_DIR)/ipc_partition.c
	$(CCF) -D_64BIT_OBJECTS -c -o ipc_partition64.o $(IPA_COMMON_DIR)/ipc_partition.c


#----------------------------------------------------------------------
#  Include the usual commonrules
#----------------------------------------------------------------------
include $(COMMONRULES)
